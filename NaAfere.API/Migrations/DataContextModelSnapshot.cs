// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaAfere.API.Data;

namespace NaAfere.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NaAfere.API.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("PostId");

                    b.Property<DateTime>("SendDate")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("SenderId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("NaAfere.API.Models.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("NaAfere.API.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Subject");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("NaAfere.API.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionUserId");

                    b.Property<int>("FriendId");

                    b.Property<DateTime>("Since");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("NaAfere.API.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ball");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Difficulty")
                        .IsRequired();

                    b.Property<int>("DisciplineId");

                    b.Property<double>("Duration");

                    b.Property<DateTime>("GameDate");

                    b.Property<bool>("Indoor");

                    b.Property<int>("LocationId");

                    b.Property<int?>("MaxNumbOfPlayers");

                    b.Property<int>("MinNumbOfPlayers");

                    b.Property<bool>("Paid");

                    b.Property<bool>("Played");

                    b.Property<decimal?>("PriceMax");

                    b.Property<decimal?>("PriceMin");

                    b.Property<bool>("Shirts");

                    b.Property<int>("TeamId");

                    b.Property<int?>("Waitlist");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TeamId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("NaAfere.API.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Website");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("NaAfere.API.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("ReadDate");

                    b.Property<bool>("RecipientDeleted");

                    b.Property<int?>("RecipientId");

                    b.Property<DateTime>("SendDate")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("SenderDeleted");

                    b.Property<int?>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("NaAfere.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LocationId");

                    b.Property<int>("PublicId");

                    b.Property<DateTime>("SendDate")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("TeamId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Url");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("NaAfere.API.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int?>("GameId");

                    b.Property<DateTime>("SendDate")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("SenderId");

                    b.Property<int?>("TeamId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TeamId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("NaAfere.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NaAfere.API.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("NaAfere.API.Models.UStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Absences");

                    b.Property<int?>("BasketballGames");

                    b.Property<int?>("FootballGames");

                    b.Property<int?>("HandballGames");

                    b.Property<int?>("HockeyGames");

                    b.Property<int>("UserId");

                    b.Property<int?>("VolleyballGames");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UStat");
                });

            modelBuilder.Entity("NaAfere.API.Models.UStatGame", b =>
                {
                    b.Property<int>("UStatsId");

                    b.Property<int>("GameId");

                    b.HasKey("UStatsId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UStatGame");
                });

            modelBuilder.Entity("NaAfere.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NaAfere.API.Models.UserGame", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GameId");

                    b.Property<bool>("IsHost");

                    b.Property<DateTime>("JoinTime")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("OnWaitlist");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("UserGame");
                });

            modelBuilder.Entity("NaAfere.API.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("NaAfere.API.Models.UserTeam", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("isHost");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("NaAfere.API.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NaAfere.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NaAfere.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NaAfere.API.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NaAfere.API.Models.Comment", b =>
                {
                    b.HasOne("NaAfere.API.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaAfere.API.Models.User", "Sender")
                        .WithMany("CommentsSent")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("NaAfere.API.Models.Event", b =>
                {
                    b.HasOne("NaAfere.API.Models.Team", "Team")
                        .WithMany("Events")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NaAfere.API.Models.Friendship", b =>
                {
                    b.HasOne("NaAfere.API.Models.User", "Friend")
                        .WithMany("FriendshipPropReceived")
                        .HasForeignKey("FriendId");

                    b.HasOne("NaAfere.API.Models.User", "User")
                        .WithMany("FriendshipPropSent")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NaAfere.API.Models.Game", b =>
                {
                    b.HasOne("NaAfere.API.Models.Discipline", "Discipline")
                        .WithMany("Games")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaAfere.API.Models.Location", "Location")
                        .WithMany("LocationGames")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaAfere.API.Models.Team", "Team")
                        .WithMany("Games")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NaAfere.API.Models.Message", b =>
                {
                    b.HasOne("NaAfere.API.Models.User", "Recipient")
                        .WithMany("MessageReceived")
                        .HasForeignKey("RecipientId");

                    b.HasOne("NaAfere.API.Models.User", "Sender")
                        .WithMany("MessageSent")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("NaAfere.API.Models.Photo", b =>
                {
                    b.HasOne("NaAfere.API.Models.Location", "Location")
                        .WithOne("Photo")
                        .HasForeignKey("NaAfere.API.Models.Photo", "LocationId");

                    b.HasOne("NaAfere.API.Models.Team", "Team")
                        .WithOne("Photo")
                        .HasForeignKey("NaAfere.API.Models.Photo", "TeamId");

                    b.HasOne("NaAfere.API.Models.User", "User")
                        .WithOne("Photo")
                        .HasForeignKey("NaAfere.API.Models.Photo", "UserId");
                });

            modelBuilder.Entity("NaAfere.API.Models.Post", b =>
                {
                    b.HasOne("NaAfere.API.Models.Game", "Game")
                        .WithMany("Posts")
                        .HasForeignKey("GameId");

                    b.HasOne("NaAfere.API.Models.User", "Sender")
                        .WithMany("PostsSent")
                        .HasForeignKey("SenderId");

                    b.HasOne("NaAfere.API.Models.Team", "Team")
                        .WithMany("Posts")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("NaAfere.API.Models.UStat", b =>
                {
                    b.HasOne("NaAfere.API.Models.User", "User")
                        .WithOne("UStat")
                        .HasForeignKey("NaAfere.API.Models.UStat", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NaAfere.API.Models.UStatGame", b =>
                {
                    b.HasOne("NaAfere.API.Models.Game", "Game")
                        .WithMany("UStatGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaAfere.API.Models.UStat", "UStat")
                        .WithMany("UStatGames")
                        .HasForeignKey("UStatsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NaAfere.API.Models.UserGame", b =>
                {
                    b.HasOne("NaAfere.API.Models.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaAfere.API.Models.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NaAfere.API.Models.UserRole", b =>
                {
                    b.HasOne("NaAfere.API.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaAfere.API.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NaAfere.API.Models.UserTeam", b =>
                {
                    b.HasOne("NaAfere.API.Models.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NaAfere.API.Models.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
